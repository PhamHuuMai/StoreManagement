#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManageSoft.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StorageManage")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void Insertdistributor(distributor instance);
    partial void Updatedistributor(distributor instance);
    partial void Deletedistributor(distributor instance);
    partial void Insertemployee(employee instance);
    partial void Updateemployee(employee instance);
    partial void Deleteemployee(employee instance);
    partial void Insertex_ticket(ex_ticket instance);
    partial void Updateex_ticket(ex_ticket instance);
    partial void Deleteex_ticket(ex_ticket instance);
    partial void Insertex_ticket_detail(ex_ticket_detail instance);
    partial void Updateex_ticket_detail(ex_ticket_detail instance);
    partial void Deleteex_ticket_detail(ex_ticket_detail instance);
    partial void Insertim_ticket(im_ticket instance);
    partial void Updateim_ticket(im_ticket instance);
    partial void Deleteim_ticket(im_ticket instance);
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void Insertshipment(shipment instance);
    partial void Updateshipment(shipment instance);
    partial void Deleteshipment(shipment instance);
    #endregion
		
		public DataDataContext() : 
				base(global::ManageSoft.Properties.Settings.Default.StorageManageConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<distributor> distributors
		{
			get
			{
				return this.GetTable<distributor>();
			}
		}
		
		public System.Data.Linq.Table<employee> employees
		{
			get
			{
				return this.GetTable<employee>();
			}
		}
		
		public System.Data.Linq.Table<ex_ticket> ex_tickets
		{
			get
			{
				return this.GetTable<ex_ticket>();
			}
		}
		
		public System.Data.Linq.Table<ex_ticket_detail> ex_ticket_details
		{
			get
			{
				return this.GetTable<ex_ticket_detail>();
			}
		}
		
		public System.Data.Linq.Table<im_ticket> im_tickets
		{
			get
			{
				return this.GetTable<im_ticket>();
			}
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<shipment> shipments
		{
			get
			{
				return this.GetTable<shipment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Pass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    #endregion
		
		public account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(10)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.distributor")]
	public partial class distributor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_distributor;
		
		private string _name_distributor;
		
		private string @__address;
		
		private EntitySet<employee> _employees;
		
		private EntitySet<ex_ticket> _ex_tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_distributorChanging(int value);
    partial void Onid_distributorChanged();
    partial void Onname_distributorChanging(string value);
    partial void Onname_distributorChanged();
    partial void On_addressChanging(string value);
    partial void On_addressChanged();
    #endregion
		
		public distributor()
		{
			this._employees = new EntitySet<employee>(new Action<employee>(this.attach_employees), new Action<employee>(this.detach_employees));
			this._ex_tickets = new EntitySet<ex_ticket>(new Action<ex_ticket>(this.attach_ex_tickets), new Action<ex_ticket>(this.detach_ex_tickets));
			OnCreated();
		}
        public override string ToString()
        {
            return this.name_distributor;
        }
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_distributor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_distributor
		{
			get
			{
				return this._id_distributor;
			}
			set
			{
				if ((this._id_distributor != value))
				{
					this.Onid_distributorChanging(value);
					this.SendPropertyChanging();
					this._id_distributor = value;
					this.SendPropertyChanged("id_distributor");
					this.Onid_distributorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_distributor", DbType="NVarChar(500)")]
		public string name_distributor
		{
			get
			{
				return this._name_distributor;
			}
			set
			{
				if ((this._name_distributor != value))
				{
					this.Onname_distributorChanging(value);
					this.SendPropertyChanging();
					this._name_distributor = value;
					this.SendPropertyChanged("name_distributor");
					this.Onname_distributorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_address]", Storage="__address", DbType="NVarChar(500)")]
		public string _address
		{
			get
			{
				return this.@__address;
			}
			set
			{
				if ((this.@__address != value))
				{
					this.On_addressChanging(value);
					this.SendPropertyChanging();
					this.@__address = value;
					this.SendPropertyChanged("_address");
					this.On_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="distributor_employee", Storage="_employees", ThisKey="id_distributor", OtherKey="id_distributor")]
		public EntitySet<employee> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="distributor_ex_ticket", Storage="_ex_tickets", ThisKey="id_distributor", OtherKey="id_distributor")]
		public EntitySet<ex_ticket> ex_tickets
		{
			get
			{
				return this._ex_tickets;
			}
			set
			{
				this._ex_tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.distributor = this;
		}
		
		private void detach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.distributor = null;
		}
		
		private void attach_ex_tickets(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.distributor = this;
		}
		
		private void detach_ex_tickets(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.distributor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee")]
	public partial class employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_employee;
		
		private string _name_employee;
		
		private System.Nullable<int> _sex;
		
		private System.Nullable<System.DateTime> _birth_date;
		
		private System.Nullable<int> _id_distributor;
		
		private EntitySet<ex_ticket> _ex_tickets;
		
		private EntitySet<ex_ticket> _ex_tickets1;
		
		private EntitySet<ex_ticket> _ex_tickets2;
		
		private EntitySet<ex_ticket> _ex_tickets3;
		
		private EntitySet<im_ticket> _im_tickets;
		
		private EntitySet<im_ticket> _im_tickets1;
		
		private EntitySet<im_ticket> _im_tickets2;
		
		private EntitySet<im_ticket> _im_tickets3;
		
		private EntityRef<distributor> _distributor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_employeeChanging(int value);
    partial void Onid_employeeChanged();
    partial void Onname_employeeChanging(string value);
    partial void Onname_employeeChanged();
    partial void OnsexChanging(System.Nullable<int> value);
    partial void OnsexChanged();
    partial void Onbirth_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onbirth_dateChanged();
    partial void Onid_distributorChanging(System.Nullable<int> value);
    partial void Onid_distributorChanged();
    #endregion
		
		public employee()
		{
			this._ex_tickets = new EntitySet<ex_ticket>(new Action<ex_ticket>(this.attach_ex_tickets), new Action<ex_ticket>(this.detach_ex_tickets));
			this._ex_tickets1 = new EntitySet<ex_ticket>(new Action<ex_ticket>(this.attach_ex_tickets1), new Action<ex_ticket>(this.detach_ex_tickets1));
			this._ex_tickets2 = new EntitySet<ex_ticket>(new Action<ex_ticket>(this.attach_ex_tickets2), new Action<ex_ticket>(this.detach_ex_tickets2));
			this._ex_tickets3 = new EntitySet<ex_ticket>(new Action<ex_ticket>(this.attach_ex_tickets3), new Action<ex_ticket>(this.detach_ex_tickets3));
			this._im_tickets = new EntitySet<im_ticket>(new Action<im_ticket>(this.attach_im_tickets), new Action<im_ticket>(this.detach_im_tickets));
			this._im_tickets1 = new EntitySet<im_ticket>(new Action<im_ticket>(this.attach_im_tickets1), new Action<im_ticket>(this.detach_im_tickets1));
			this._im_tickets2 = new EntitySet<im_ticket>(new Action<im_ticket>(this.attach_im_tickets2), new Action<im_ticket>(this.detach_im_tickets2));
			this._im_tickets3 = new EntitySet<im_ticket>(new Action<im_ticket>(this.attach_im_tickets3), new Action<im_ticket>(this.detach_im_tickets3));
			this._distributor = default(EntityRef<distributor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_employee", DbType="NVarChar(500)")]
		public string name_employee
		{
			get
			{
				return this._name_employee;
			}
			set
			{
				if ((this._name_employee != value))
				{
					this.Onname_employeeChanging(value);
					this.SendPropertyChanging();
					this._name_employee = value;
					this.SendPropertyChanged("name_employee");
					this.Onname_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="Int")]
		public System.Nullable<int> sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birth_date", DbType="Date")]
		public System.Nullable<System.DateTime> birth_date
		{
			get
			{
				return this._birth_date;
			}
			set
			{
				if ((this._birth_date != value))
				{
					this.Onbirth_dateChanging(value);
					this.SendPropertyChanging();
					this._birth_date = value;
					this.SendPropertyChanged("birth_date");
					this.Onbirth_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_distributor", DbType="Int")]
		public System.Nullable<int> id_distributor
		{
			get
			{
				return this._id_distributor;
			}
			set
			{
				if ((this._id_distributor != value))
				{
					if (this._distributor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_distributorChanging(value);
					this.SendPropertyChanging();
					this._id_distributor = value;
					this.SendPropertyChanged("id_distributor");
					this.Onid_distributorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket", Storage="_ex_tickets", ThisKey="id_employee", OtherKey="id_write")]
		public EntitySet<ex_ticket> ex_tickets
		{
			get
			{
				return this._ex_tickets;
			}
			set
			{
				this._ex_tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket1", Storage="_ex_tickets1", ThisKey="id_employee", OtherKey="id_storager")]
		public EntitySet<ex_ticket> ex_tickets1
		{
			get
			{
				return this._ex_tickets1;
			}
			set
			{
				this._ex_tickets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket2", Storage="_ex_tickets2", ThisKey="id_employee", OtherKey="id_accountant")]
		public EntitySet<ex_ticket> ex_tickets2
		{
			get
			{
				return this._ex_tickets2;
			}
			set
			{
				this._ex_tickets2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket3", Storage="_ex_tickets3", ThisKey="id_employee", OtherKey="id_shipper")]
		public EntitySet<ex_ticket> ex_tickets3
		{
			get
			{
				return this._ex_tickets3;
			}
			set
			{
				this._ex_tickets3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket", Storage="_im_tickets", ThisKey="id_employee", OtherKey="id_write")]
		public EntitySet<im_ticket> im_tickets
		{
			get
			{
				return this._im_tickets;
			}
			set
			{
				this._im_tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket1", Storage="_im_tickets1", ThisKey="id_employee", OtherKey="id_shipper")]
		public EntitySet<im_ticket> im_tickets1
		{
			get
			{
				return this._im_tickets1;
			}
			set
			{
				this._im_tickets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket2", Storage="_im_tickets2", ThisKey="id_employee", OtherKey="id_accountant")]
		public EntitySet<im_ticket> im_tickets2
		{
			get
			{
				return this._im_tickets2;
			}
			set
			{
				this._im_tickets2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket3", Storage="_im_tickets3", ThisKey="id_employee", OtherKey="id_storager")]
		public EntitySet<im_ticket> im_tickets3
		{
			get
			{
				return this._im_tickets3;
			}
			set
			{
				this._im_tickets3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="distributor_employee", Storage="_distributor", ThisKey="id_distributor", OtherKey="id_distributor", IsForeignKey=true)]
		public distributor distributor
		{
			get
			{
				return this._distributor.Entity;
			}
			set
			{
				distributor previousValue = this._distributor.Entity;
				if (((previousValue != value) 
							|| (this._distributor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._distributor.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._distributor.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._id_distributor = value.id_distributor;
					}
					else
					{
						this._id_distributor = default(Nullable<int>);
					}
					this.SendPropertyChanged("distributor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ex_tickets(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_ex_tickets(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_ex_tickets1(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee1 = this;
		}
		
		private void detach_ex_tickets1(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee1 = null;
		}
		
		private void attach_ex_tickets2(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee2 = this;
		}
		
		private void detach_ex_tickets2(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee2 = null;
		}
		
		private void attach_ex_tickets3(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee3 = this;
		}
		
		private void detach_ex_tickets3(ex_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee3 = null;
		}
		
		private void attach_im_tickets(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_im_tickets(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_im_tickets1(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee1 = this;
		}
		
		private void detach_im_tickets1(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee1 = null;
		}
		
		private void attach_im_tickets2(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee2 = this;
		}
		
		private void detach_im_tickets2(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee2 = null;
		}
		
		private void attach_im_tickets3(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee3 = this;
		}
		
		private void detach_im_tickets3(im_ticket entity)
		{
			this.SendPropertyChanging();
			entity.employee3 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ex_ticket")]
	public partial class ex_ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_ex_ticket;
		
		private System.Nullable<System.DateTime> _date_ex;
		
		private System.Nullable<int> _id_write;
		
		private System.Nullable<int> _id_storager;
		
		private System.Nullable<int> _id_accountant;
		
		private System.Nullable<int> _id_shipper;
		
		private System.Nullable<int> _id_distributor;
		
		private EntitySet<ex_ticket_detail> _ex_ticket_details;
		
		private EntityRef<distributor> _distributor;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<employee> _employee1;
		
		private EntityRef<employee> _employee2;
		
		private EntityRef<employee> _employee3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_ex_ticketChanging(int value);
    partial void Onid_ex_ticketChanged();
    partial void Ondate_exChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_exChanged();
    partial void Onid_writeChanging(System.Nullable<int> value);
    partial void Onid_writeChanged();
    partial void Onid_storagerChanging(System.Nullable<int> value);
    partial void Onid_storagerChanged();
    partial void Onid_accountantChanging(System.Nullable<int> value);
    partial void Onid_accountantChanged();
    partial void Onid_shipperChanging(System.Nullable<int> value);
    partial void Onid_shipperChanged();
    partial void Onid_distributorChanging(System.Nullable<int> value);
    partial void Onid_distributorChanged();
    #endregion
		
		public ex_ticket()
		{
			this._ex_ticket_details = new EntitySet<ex_ticket_detail>(new Action<ex_ticket_detail>(this.attach_ex_ticket_details), new Action<ex_ticket_detail>(this.detach_ex_ticket_details));
			this._distributor = default(EntityRef<distributor>);
			this._employee = default(EntityRef<employee>);
			this._employee1 = default(EntityRef<employee>);
			this._employee2 = default(EntityRef<employee>);
			this._employee3 = default(EntityRef<employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ex_ticket", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_ex_ticket
		{
			get
			{
				return this._id_ex_ticket;
			}
			set
			{
				if ((this._id_ex_ticket != value))
				{
					this.Onid_ex_ticketChanging(value);
					this.SendPropertyChanging();
					this._id_ex_ticket = value;
					this.SendPropertyChanged("id_ex_ticket");
					this.Onid_ex_ticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_ex", DbType="Date")]
		public System.Nullable<System.DateTime> date_ex
		{
			get
			{
				return this._date_ex;
			}
			set
			{
				if ((this._date_ex != value))
				{
					this.Ondate_exChanging(value);
					this.SendPropertyChanging();
					this._date_ex = value;
					this.SendPropertyChanged("date_ex");
					this.Ondate_exChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_write", DbType="Int")]
		public System.Nullable<int> id_write
		{
			get
			{
				return this._id_write;
			}
			set
			{
				if ((this._id_write != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_writeChanging(value);
					this.SendPropertyChanging();
					this._id_write = value;
					this.SendPropertyChanged("id_write");
					this.Onid_writeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_storager", DbType="Int")]
		public System.Nullable<int> id_storager
		{
			get
			{
				return this._id_storager;
			}
			set
			{
				if ((this._id_storager != value))
				{
					if (this._employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_storagerChanging(value);
					this.SendPropertyChanging();
					this._id_storager = value;
					this.SendPropertyChanged("id_storager");
					this.Onid_storagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_accountant", DbType="Int")]
		public System.Nullable<int> id_accountant
		{
			get
			{
				return this._id_accountant;
			}
			set
			{
				if ((this._id_accountant != value))
				{
					if (this._employee2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountantChanging(value);
					this.SendPropertyChanging();
					this._id_accountant = value;
					this.SendPropertyChanged("id_accountant");
					this.Onid_accountantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_shipper", DbType="Int")]
		public System.Nullable<int> id_shipper
		{
			get
			{
				return this._id_shipper;
			}
			set
			{
				if ((this._id_shipper != value))
				{
					if (this._employee3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_shipperChanging(value);
					this.SendPropertyChanging();
					this._id_shipper = value;
					this.SendPropertyChanged("id_shipper");
					this.Onid_shipperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_distributor", DbType="Int")]
		public System.Nullable<int> id_distributor
		{
			get
			{
				return this._id_distributor;
			}
			set
			{
				if ((this._id_distributor != value))
				{
					if (this._distributor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_distributorChanging(value);
					this.SendPropertyChanging();
					this._id_distributor = value;
					this.SendPropertyChanged("id_distributor");
					this.Onid_distributorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ex_ticket_ex_ticket_detail", Storage="_ex_ticket_details", ThisKey="id_ex_ticket", OtherKey="id_ex_ticket")]
		public EntitySet<ex_ticket_detail> ex_ticket_details
		{
			get
			{
				return this._ex_ticket_details;
			}
			set
			{
				this._ex_ticket_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="distributor_ex_ticket", Storage="_distributor", ThisKey="id_distributor", OtherKey="id_distributor", IsForeignKey=true)]
		public distributor distributor
		{
			get
			{
				return this._distributor.Entity;
			}
			set
			{
				distributor previousValue = this._distributor.Entity;
				if (((previousValue != value) 
							|| (this._distributor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._distributor.Entity = null;
						previousValue.ex_tickets.Remove(this);
					}
					this._distributor.Entity = value;
					if ((value != null))
					{
						value.ex_tickets.Add(this);
						this._id_distributor = value.id_distributor;
					}
					else
					{
						this._id_distributor = default(Nullable<int>);
					}
					this.SendPropertyChanged("distributor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket", Storage="_employee", ThisKey="id_write", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.ex_tickets.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.ex_tickets.Add(this);
						this._id_write = value.id_employee;
					}
					else
					{
						this._id_write = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket1", Storage="_employee1", ThisKey="id_storager", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee1
		{
			get
			{
				return this._employee1.Entity;
			}
			set
			{
				employee previousValue = this._employee1.Entity;
				if (((previousValue != value) 
							|| (this._employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee1.Entity = null;
						previousValue.ex_tickets1.Remove(this);
					}
					this._employee1.Entity = value;
					if ((value != null))
					{
						value.ex_tickets1.Add(this);
						this._id_storager = value.id_employee;
					}
					else
					{
						this._id_storager = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket2", Storage="_employee2", ThisKey="id_accountant", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee2
		{
			get
			{
				return this._employee2.Entity;
			}
			set
			{
				employee previousValue = this._employee2.Entity;
				if (((previousValue != value) 
							|| (this._employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee2.Entity = null;
						previousValue.ex_tickets2.Remove(this);
					}
					this._employee2.Entity = value;
					if ((value != null))
					{
						value.ex_tickets2.Add(this);
						this._id_accountant = value.id_employee;
					}
					else
					{
						this._id_accountant = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_ex_ticket3", Storage="_employee3", ThisKey="id_shipper", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee3
		{
			get
			{
				return this._employee3.Entity;
			}
			set
			{
				employee previousValue = this._employee3.Entity;
				if (((previousValue != value) 
							|| (this._employee3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee3.Entity = null;
						previousValue.ex_tickets3.Remove(this);
					}
					this._employee3.Entity = value;
					if ((value != null))
					{
						value.ex_tickets3.Add(this);
						this._id_shipper = value.id_employee;
					}
					else
					{
						this._id_shipper = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ex_ticket_details(ex_ticket_detail entity)
		{
			this.SendPropertyChanging();
			entity.ex_ticket = this;
		}
		
		private void detach_ex_ticket_details(ex_ticket_detail entity)
		{
			this.SendPropertyChanging();
			entity.ex_ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ex_ticket_detail")]
	public partial class ex_ticket_detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_shipment;
		
		private int _id_ex_ticket;
		
		private System.Nullable<int> _number;
		
		private System.Nullable<int> _real_number;
		
		private EntityRef<ex_ticket> _ex_ticket;
		
		private EntityRef<shipment> _shipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_shipmentChanging(int value);
    partial void Onid_shipmentChanged();
    partial void Onid_ex_ticketChanging(int value);
    partial void Onid_ex_ticketChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    partial void Onreal_numberChanging(System.Nullable<int> value);
    partial void Onreal_numberChanged();
    #endregion
		
		public ex_ticket_detail()
		{
			this._ex_ticket = default(EntityRef<ex_ticket>);
			this._shipment = default(EntityRef<shipment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_shipment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_shipment
		{
			get
			{
				return this._id_shipment;
			}
			set
			{
				if ((this._id_shipment != value))
				{
					if (this._shipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_shipmentChanging(value);
					this.SendPropertyChanging();
					this._id_shipment = value;
					this.SendPropertyChanged("id_shipment");
					this.Onid_shipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_ex_ticket", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_ex_ticket
		{
			get
			{
				return this._id_ex_ticket;
			}
			set
			{
				if ((this._id_ex_ticket != value))
				{
					if (this._ex_ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ex_ticketChanging(value);
					this.SendPropertyChanging();
					this._id_ex_ticket = value;
					this.SendPropertyChanged("id_ex_ticket");
					this.Onid_ex_ticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_real_number", DbType="Int")]
		public System.Nullable<int> real_number
		{
			get
			{
				return this._real_number;
			}
			set
			{
				if ((this._real_number != value))
				{
					this.Onreal_numberChanging(value);
					this.SendPropertyChanging();
					this._real_number = value;
					this.SendPropertyChanged("real_number");
					this.Onreal_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ex_ticket_ex_ticket_detail", Storage="_ex_ticket", ThisKey="id_ex_ticket", OtherKey="id_ex_ticket", IsForeignKey=true)]
		public ex_ticket ex_ticket
		{
			get
			{
				return this._ex_ticket.Entity;
			}
			set
			{
				ex_ticket previousValue = this._ex_ticket.Entity;
				if (((previousValue != value) 
							|| (this._ex_ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ex_ticket.Entity = null;
						previousValue.ex_ticket_details.Remove(this);
					}
					this._ex_ticket.Entity = value;
					if ((value != null))
					{
						value.ex_ticket_details.Add(this);
						this._id_ex_ticket = value.id_ex_ticket;
					}
					else
					{
						this._id_ex_ticket = default(int);
					}
					this.SendPropertyChanged("ex_ticket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="shipment_ex_ticket_detail", Storage="_shipment", ThisKey="id_shipment", OtherKey="id_shipment", IsForeignKey=true)]
		public shipment shipment
		{
			get
			{
				return this._shipment.Entity;
			}
			set
			{
				shipment previousValue = this._shipment.Entity;
				if (((previousValue != value) 
							|| (this._shipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._shipment.Entity = null;
						previousValue.ex_ticket_details.Remove(this);
					}
					this._shipment.Entity = value;
					if ((value != null))
					{
						value.ex_ticket_details.Add(this);
						this._id_shipment = value.id_shipment;
					}
					else
					{
						this._id_shipment = default(int);
					}
					this.SendPropertyChanged("shipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.im_ticket")]
	public partial class im_ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_im_ticket;
		
		private System.Nullable<System.DateTime> _date_im;
		
		private System.Nullable<int> _id_write;
		
		private System.Nullable<int> _id_storager;
		
		private System.Nullable<int> _id_accountant;
		
		private System.Nullable<int> _id_shipper;
		
		private EntitySet<shipment> _shipments;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<employee> _employee1;
		
		private EntityRef<employee> _employee2;
		
		private EntityRef<employee> _employee3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_im_ticketChanging(int value);
    partial void Onid_im_ticketChanged();
    partial void Ondate_imChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_imChanged();
    partial void Onid_writeChanging(System.Nullable<int> value);
    partial void Onid_writeChanged();
    partial void Onid_storagerChanging(System.Nullable<int> value);
    partial void Onid_storagerChanged();
    partial void Onid_accountantChanging(System.Nullable<int> value);
    partial void Onid_accountantChanged();
    partial void Onid_shipperChanging(System.Nullable<int> value);
    partial void Onid_shipperChanged();
    #endregion
		
		public im_ticket()
		{
			this._shipments = new EntitySet<shipment>(new Action<shipment>(this.attach_shipments), new Action<shipment>(this.detach_shipments));
			this._employee = default(EntityRef<employee>);
			this._employee1 = default(EntityRef<employee>);
			this._employee2 = default(EntityRef<employee>);
			this._employee3 = default(EntityRef<employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_im_ticket", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_im_ticket
		{
			get
			{
				return this._id_im_ticket;
			}
			set
			{
				if ((this._id_im_ticket != value))
				{
					this.Onid_im_ticketChanging(value);
					this.SendPropertyChanging();
					this._id_im_ticket = value;
					this.SendPropertyChanged("id_im_ticket");
					this.Onid_im_ticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_im", DbType="Date")]
		public System.Nullable<System.DateTime> date_im
		{
			get
			{
				return this._date_im;
			}
			set
			{
				if ((this._date_im != value))
				{
					this.Ondate_imChanging(value);
					this.SendPropertyChanging();
					this._date_im = value;
					this.SendPropertyChanged("date_im");
					this.Ondate_imChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_write", DbType="Int")]
		public System.Nullable<int> id_write
		{
			get
			{
				return this._id_write;
			}
			set
			{
				if ((this._id_write != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_writeChanging(value);
					this.SendPropertyChanging();
					this._id_write = value;
					this.SendPropertyChanged("id_write");
					this.Onid_writeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_storager", DbType="Int")]
		public System.Nullable<int> id_storager
		{
			get
			{
				return this._id_storager;
			}
			set
			{
				if ((this._id_storager != value))
				{
					if (this._employee3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_storagerChanging(value);
					this.SendPropertyChanging();
					this._id_storager = value;
					this.SendPropertyChanged("id_storager");
					this.Onid_storagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_accountant", DbType="Int")]
		public System.Nullable<int> id_accountant
		{
			get
			{
				return this._id_accountant;
			}
			set
			{
				if ((this._id_accountant != value))
				{
					if (this._employee2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountantChanging(value);
					this.SendPropertyChanging();
					this._id_accountant = value;
					this.SendPropertyChanged("id_accountant");
					this.Onid_accountantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_shipper", DbType="Int")]
		public System.Nullable<int> id_shipper
		{
			get
			{
				return this._id_shipper;
			}
			set
			{
				if ((this._id_shipper != value))
				{
					if (this._employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_shipperChanging(value);
					this.SendPropertyChanging();
					this._id_shipper = value;
					this.SendPropertyChanged("id_shipper");
					this.Onid_shipperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="im_ticket_shipment", Storage="_shipments", ThisKey="id_im_ticket", OtherKey="id_im_ticket")]
		public EntitySet<shipment> shipments
		{
			get
			{
				return this._shipments;
			}
			set
			{
				this._shipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket", Storage="_employee", ThisKey="id_write", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.im_tickets.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.im_tickets.Add(this);
						this._id_write = value.id_employee;
					}
					else
					{
						this._id_write = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket1", Storage="_employee1", ThisKey="id_shipper", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee1
		{
			get
			{
				return this._employee1.Entity;
			}
			set
			{
				employee previousValue = this._employee1.Entity;
				if (((previousValue != value) 
							|| (this._employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee1.Entity = null;
						previousValue.im_tickets1.Remove(this);
					}
					this._employee1.Entity = value;
					if ((value != null))
					{
						value.im_tickets1.Add(this);
						this._id_shipper = value.id_employee;
					}
					else
					{
						this._id_shipper = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket2", Storage="_employee2", ThisKey="id_accountant", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee2
		{
			get
			{
				return this._employee2.Entity;
			}
			set
			{
				employee previousValue = this._employee2.Entity;
				if (((previousValue != value) 
							|| (this._employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee2.Entity = null;
						previousValue.im_tickets2.Remove(this);
					}
					this._employee2.Entity = value;
					if ((value != null))
					{
						value.im_tickets2.Add(this);
						this._id_accountant = value.id_employee;
					}
					else
					{
						this._id_accountant = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_im_ticket3", Storage="_employee3", ThisKey="id_storager", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee3
		{
			get
			{
				return this._employee3.Entity;
			}
			set
			{
				employee previousValue = this._employee3.Entity;
				if (((previousValue != value) 
							|| (this._employee3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee3.Entity = null;
						previousValue.im_tickets3.Remove(this);
					}
					this._employee3.Entity = value;
					if ((value != null))
					{
						value.im_tickets3.Add(this);
						this._id_storager = value.id_employee;
					}
					else
					{
						this._id_storager = default(Nullable<int>);
					}
					this.SendPropertyChanged("employee3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_shipments(shipment entity)
		{
			this.SendPropertyChanging();
			entity.im_ticket = this;
		}
		
		private void detach_shipments(shipment entity)
		{
			this.SendPropertyChanging();
			entity.im_ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.item")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_item;
		
		private string _item_name;
		
		private string _name_type;
		
		private string _planet_type;
		
		private EntitySet<shipment> _shipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_itemChanging(int value);
    partial void Onid_itemChanged();
    partial void Onitem_nameChanging(string value);
    partial void Onitem_nameChanged();
    partial void Onname_typeChanging(string value);
    partial void Onname_typeChanged();
    partial void Onplanet_typeChanging(string value);
    partial void Onplanet_typeChanged();
    #endregion
		
		public item()
		{
			this._shipments = new EntitySet<shipment>(new Action<shipment>(this.attach_shipments), new Action<shipment>(this.detach_shipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_item", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_item
		{
			get
			{
				return this._id_item;
			}
			set
			{
				if ((this._id_item != value))
				{
					this.Onid_itemChanging(value);
					this.SendPropertyChanging();
					this._id_item = value;
					this.SendPropertyChanged("id_item");
					this.Onid_itemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_name", DbType="NVarChar(500)")]
		public string item_name
		{
			get
			{
				return this._item_name;
			}
			set
			{
				if ((this._item_name != value))
				{
					this.Onitem_nameChanging(value);
					this.SendPropertyChanging();
					this._item_name = value;
					this.SendPropertyChanged("item_name");
					this.Onitem_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_type", DbType="NVarChar(100)")]
		public string name_type
		{
			get
			{
				return this._name_type;
			}
			set
			{
				if ((this._name_type != value))
				{
					this.Onname_typeChanging(value);
					this.SendPropertyChanging();
					this._name_type = value;
					this.SendPropertyChanged("name_type");
					this.Onname_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_planet_type", DbType="NVarChar(500)")]
		public string planet_type
		{
			get
			{
				return this._planet_type;
			}
			set
			{
				if ((this._planet_type != value))
				{
					this.Onplanet_typeChanging(value);
					this.SendPropertyChanging();
					this._planet_type = value;
					this.SendPropertyChanged("planet_type");
					this.Onplanet_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_shipment", Storage="_shipments", ThisKey="id_item", OtherKey="id_item")]
		public EntitySet<shipment> shipments
		{
			get
			{
				return this._shipments;
			}
			set
			{
				this._shipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_shipments(shipment entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_shipments(shipment entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.shipment")]
	public partial class shipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		protected int _id_shipment;

        protected System.Nullable<int> _id_item;

        protected System.Nullable<double> _im_unit_price;

        protected System.Nullable<double> _ex_unit_price;

        protected System.Nullable<int> _number;
		
		private string _unit;

        protected System.Nullable<System.DateTime> _man_date;

        protected System.Nullable<System.DateTime> _exp_date;

        protected System.Nullable<int> _id_im_ticket;

        protected string _posion;
		
		private EntitySet<ex_ticket_detail> _ex_ticket_details;
		
		private EntityRef<im_ticket> _im_ticket;
		
		private EntityRef<item> _item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_shipmentChanging(int value);
    partial void Onid_shipmentChanged();
    partial void Onid_itemChanging(System.Nullable<int> value);
    partial void Onid_itemChanged();
    partial void Onim_unit_priceChanging(System.Nullable<double> value);
    partial void Onim_unit_priceChanged();
    partial void Onex_unit_priceChanging(System.Nullable<double> value);
    partial void Onex_unit_priceChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void Onman_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onman_dateChanged();
    partial void Onexp_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onexp_dateChanged();
    partial void Onid_im_ticketChanging(System.Nullable<int> value);
    partial void Onid_im_ticketChanged();
    partial void OnposionChanging(string value);
    partial void OnposionChanged();
    #endregion
		
		public shipment()
		{
			this._ex_ticket_details = new EntitySet<ex_ticket_detail>(new Action<ex_ticket_detail>(this.attach_ex_ticket_details), new Action<ex_ticket_detail>(this.detach_ex_ticket_details));
			this._im_ticket = default(EntityRef<im_ticket>);
			this._item = default(EntityRef<item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_shipment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_shipment
		{
			get
			{
				return this._id_shipment;
			}
			set
			{
				if ((this._id_shipment != value))
				{
					this.Onid_shipmentChanging(value);
					this.SendPropertyChanging();
					this._id_shipment = value;
					this.SendPropertyChanged("id_shipment");
					this.Onid_shipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_item", DbType="Int")]
		public System.Nullable<int> id_item
		{
			get
			{
				return this._id_item;
			}
			set
			{
				if ((this._id_item != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_itemChanging(value);
					this.SendPropertyChanging();
					this._id_item = value;
					this.SendPropertyChanged("id_item");
					this.Onid_itemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_im_unit_price", DbType="Float")]
		public System.Nullable<double> im_unit_price
		{
			get
			{
				return this._im_unit_price;
			}
			set
			{
				if ((this._im_unit_price != value))
				{
					this.Onim_unit_priceChanging(value);
					this.SendPropertyChanging();
					this._im_unit_price = value;
					this.SendPropertyChanged("im_unit_price");
					this.Onim_unit_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ex_unit_price", DbType="Float")]
		public System.Nullable<double> ex_unit_price
		{
			get
			{
				return this._ex_unit_price;
			}
			set
			{
				if ((this._ex_unit_price != value))
				{
					this.Onex_unit_priceChanging(value);
					this.SendPropertyChanging();
					this._ex_unit_price = value;
					this.SendPropertyChanged("ex_unit_price");
					this.Onex_unit_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="NVarChar(100)")]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_man_date", DbType="Date")]
		public System.Nullable<System.DateTime> man_date
		{
			get
			{
				return this._man_date;
			}
			set
			{
				if ((this._man_date != value))
				{
					this.Onman_dateChanging(value);
					this.SendPropertyChanging();
					this._man_date = value;
					this.SendPropertyChanged("man_date");
					this.Onman_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exp_date", DbType="Date")]
		public System.Nullable<System.DateTime> exp_date
		{
			get
			{
				return this._exp_date;
			}
			set
			{
				if ((this._exp_date != value))
				{
					this.Onexp_dateChanging(value);
					this.SendPropertyChanging();
					this._exp_date = value;
					this.SendPropertyChanged("exp_date");
					this.Onexp_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_im_ticket", DbType="Int")]
		public System.Nullable<int> id_im_ticket
		{
			get
			{
				return this._id_im_ticket;
			}
			set
			{
				if ((this._id_im_ticket != value))
				{
					if (this._im_ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_im_ticketChanging(value);
					this.SendPropertyChanging();
					this._id_im_ticket = value;
					this.SendPropertyChanged("id_im_ticket");
					this.Onid_im_ticketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_posion", DbType="VarChar(100)")]
		public string posion
		{
			get
			{
				return this._posion;
			}
			set
			{
				if ((this._posion != value))
				{
					this.OnposionChanging(value);
					this.SendPropertyChanging();
					this._posion = value;
					this.SendPropertyChanged("posion");
					this.OnposionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="shipment_ex_ticket_detail", Storage="_ex_ticket_details", ThisKey="id_shipment", OtherKey="id_shipment")]
		public EntitySet<ex_ticket_detail> ex_ticket_details
		{
			get
			{
				return this._ex_ticket_details;
			}
			set
			{
				this._ex_ticket_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="im_ticket_shipment", Storage="_im_ticket", ThisKey="id_im_ticket", OtherKey="id_im_ticket", IsForeignKey=true)]
		public im_ticket im_ticket
		{
			get
			{
				return this._im_ticket.Entity;
			}
			set
			{
				im_ticket previousValue = this._im_ticket.Entity;
				if (((previousValue != value) 
							|| (this._im_ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._im_ticket.Entity = null;
						previousValue.shipments.Remove(this);
					}
					this._im_ticket.Entity = value;
					if ((value != null))
					{
						value.shipments.Add(this);
						this._id_im_ticket = value.id_im_ticket;
					}
					else
					{
						this._id_im_ticket = default(Nullable<int>);
					}
					this.SendPropertyChanged("im_ticket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_shipment", Storage="_item", ThisKey="id_item", OtherKey="id_item", IsForeignKey=true)]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.shipments.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.shipments.Add(this);
						this._id_item = value.id_item;
					}
					else
					{
						this._id_item = default(Nullable<int>);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ex_ticket_details(ex_ticket_detail entity)
		{
			this.SendPropertyChanging();
			entity.shipment = this;
		}
		
		private void detach_ex_ticket_details(ex_ticket_detail entity)
		{
			this.SendPropertyChanging();
			entity.shipment = null;
		}
	}
}
#pragma warning restore 1591
